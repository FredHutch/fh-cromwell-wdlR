---
title: "Getting Started"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Getting Started}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, message=FALSE}
library(rcromwell)
library(dplyr)
```

## Set your Cromwell URL

```{r set-url}
cromwell_config("http://localhost:8000")
```

## Send a workflow to Crowmell

Get your file paths

```{r file-paths}
file_hello <- system.file("examples/hello.wdl", package = "rcromwell")
file_inputs <- system.file("examples/inputs.json", package = "rcromwell")
file.copy(file_hello, (file_hello_tmp <- tempfile()))
```

```{r include=FALSE}
file.copy(file_hello, (file_hello <- tempfile()))
file.copy(file_inputs, (file_inputs <- tempfile()))
```

Submit the job

```{r submit-batch}
this_job <- cromwell_submit_batch(wdl = file_hello, params = file_inputs)
job_id <- this_job$id
```

`this_job$id` (`r this_job$id`) is the unique Cromwell ID for your entire workflow - you can use that to request all sorts of metadata!!!

## Now get all your metadata and track the workflow!!

Return a data frame of all jobs run in the past number of days (uses your database)

```{r}
cromwell_jobs(days = 7)
```

Return a data frame (one line if you only submit one workflow id) containing workflow level metadata

```{r include=FALSE}
Sys.sleep(25)
```

```{r}
w <- cromwell_workflow(job_id)
```

Print the current status of the workflow(s) is(are)

```{r}
w$status
```

Return a data frame containing all call level metadata

```{r}
df <- cromwell_call(job_id)
```

Handy set of dplyr commands to tell you about how the various calls are doing

```{r}
df %>%
  group_by(callName, executionStatus) %>%
  summarize(status = n()) %>%
  arrange(executionStatus)
```

Returns a data frame containing call level call caching metadata

```{r include=FALSE}
Sys.sleep(10)
```

```{r}
cromwell_cache(job_id)
```
